# Copyright 2021 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/rust.gni")

# Defines a Rust unit test.
#
# This generates an executable + a script that can be run on Chromium bots.
# Future iterations of this template may do something smarter with the test
# code in order to automatically contribute it to test steps on the bots.
#
# Parameters
#
#   sources
#   edition (optional)
#   configs (optional)
#   deps (optional)
#   crate_root (optional)
#   features (optional)
#   rustflags (optional)
#     All as in rust_source_set.
#
# Example of usage:
#
#   rust_unit_test("foo_tests") {
#     deps = [
#       "//third_party/rust/test_utils/v1:lib",
#     ]
#     sources = [ "src/lib.rs" ]
#   }
#
# Implementation note: you might assume it makes sense to implement this
# in terms of rust_target in order to avoid the duplication of logic around
# features and editions. We don't do that because rust_target actually
# depends on this template in order to build embedded unit tests
# (and therefore depending on rust_target here would lead to an infinite
# import loop).

template("rust_unit_test") {
  assert(build_rust_unit_tests)
  if (defined(invoker.crate_name)) {
    _crate_name = invoker.crate_name
  } else {
    _crate_name = target_name
  }
  if (defined(invoker.crate_root)) {
    _crate_root = invoker.crate_root
  } else {
    _crate_root = "src/lib.rs"
  }
  _rustflags = invoker.rustflags
  if (defined(invoker.features)) {
    foreach(i, invoker.features) {
      _rustflags += [ "--cfg=feature=\"${i}\"" ]
    }
  }
  _configs = invoker.configs
  _edition = "2021"
  if (defined(invoker.edition)) {
    _edition = invoker.edition
  }
  _configs += [ string_join("",
                            [
                              "//build/rust:edition_",
                              _edition,
                            ]) ]

  # We require that all source files are listed, even though this is
  # not a requirement for rustc. The reason is to ensure that tools
  # such as `gn deps` give the correct answer, and thus we trigger
  # the right test suites etc. on code change.
  # TODO(crbug.com/1256930) - verify this is correct
  assert(defined(invoker.sources), "sources must be listed")

  _original_target_name = target_name
  _exe_target_name = target_name + "_exe"
  _script_target_name = target_name + "_wrapper_script"
  group(target_name) {
    testonly = true
    deps = [
      ":$_exe_target_name",
      ":$_script_target_name",
    ]
  }

  # Note that the location/filename of the wrapper script has to follow the
  # requirements of "generated_script" as outlined in the doc comment at the
  # top of //testing/buildbot/gn_isolate_map.pyl
  _script_filepath = "$root_out_dir/bin/run_${_original_target_name}"

  # TODO(https://crbug.com/1271215): Also generate: bin/run_${target_name}.bat
  # on Windows: if (is_win) { ... }.
  action(_script_target_name) {
    testonly = true
    script = "//testing/scripts/rust/generate_bash_script.py"
    outputs = [ _script_filepath ]
    data = [ _script_filepath ]
    data_deps = [
      ":$_exe_target_name",
      "//testing/scripts/rust",
    ]
    args = [
      "--rust-test-executable",
      _crate_name,
      "--exe-dir",
      rebase_path(root_out_dir, root_build_dir),
      "--script-path",
      rebase_path(_script_filepath, root_build_dir),
    ]
  }

  # TODO(crbug.com/1229320): Arrange to run test executables on try bots.
  # TODO(crbug.com/gn/146): Allow Rust executables to depend on C/C++ source sets.
  # This is important in cases where Rust tests may depend upon C/C++
  # dependencies.
  executable(_exe_target_name) {
    testonly = true
    forward_variables_from(invoker,
                           "*",
                           [
                             "edition",
                             "features",
                             "rustflags",
                             "configs",
                             "output_name",
                             "crate_name",
                             "crate_root",
                           ])

    rustflags = [
      "--cfg",
      "feature=\"test\"",
      "--test",
    ]
    rustflags += _rustflags
    configs = []
    configs = _configs
    crate_name = _crate_name
    crate_root = _crate_root
  }
}

set_defaults("rust_unit_test") {
  configs = default_executable_configs
  deps = []
  rustflags = []
}
